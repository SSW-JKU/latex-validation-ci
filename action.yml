name: "LaTeX Validation Action"
description: "Validates (spell/grammar checks and lints) the LaTeX files of the SSW lectures and exercises"
inputs:
  sample_input:
    description: "Some description"
    required: false # or leave out ot make it required
    default: "Some default value"
  python_version:
    description: "Python version to use"
    required: false
    default: "3.13"
  texlive_version:
    description: "TeX Live version to use"
    required: false
    default: "2024"
  texlive_packages:
    description: "TeX Live packages to install"
    required: false
    default: >-
      scheme-basic
  build_config:
    description: "Relative path to the build Config (e.g .lecture-build-ci.json)"
    required: false
    default: '.lecture-build-ci.json'
  lint_pr_comment_with_zipped_report:
    description: 'For linting: create PR-comment with chktex-reports packaged as zip'
    required: false
    default: 'false'
  lint_pr_comment_with_link_to_GITHUB_SUMMARY:
    description: 'For linting: create chktex-report as GITHUB_STEP_SUMMARY'
    required: false
    default: 'true'
  lint_pr_comment_with_md_report:
    description: 'For linting: create chktex-report (md file) and post as PR-comment'
    required: false
    default: 'false'
  ltex_plus_version:
    description: "Ltex-plus version to use"
    required: false
    default: "18.5.1"
  ltex_plus_dir:
    description: "Path to ltex-plus executable."
    required: false
    default: "ltex-ls-plus-18.5.1/bin/ltex-cli-plus"
  spelling_report_folder:
    description: "Relative path where html-chktex-lint-reports (captured console output) is saved intermediately."
    required: false
    default: "ltex_reports"
  chktex_version:
    description: "CHKTEX version to use"
    required: false
    default: "1.7.9"
  lint_report_folder:
    description: "Relative path where html-chktex-lint-reports (captured console output) is saved intermediately."
    required: false
    default: "chktex_reports"

outputs:
  sample_output:
    description: "Sample output"
    value: ${{ steps.dummy.outputs.sample_output }}

runs:
  using: "composite"
  steps:
    # TODO: these first steps are probably also needed in your action as they set up python and use the requirements file from the _action_ repository
    # Create symbolic link for requirements.txt (https://github.com/actions/setup-python/issues/361#issuecomment-2530429607)
    # to work around https://github.com/actions/setup-python/issues/361
    # - name: Create symbolic link for requirements.txt
    #   run: ln -s ${{ github.action_path }}/requirements.txt
    #   shell: bash
    # install Python
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        cache: "pip"
        python-version: ${{ inputs.python_version }}

    - name: Install Python dependencies
      working-directory: ${{ github.action_path }}
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools
        pip install PyGithub
        pip install beautifulsoup4

    # TODO: if you also need texlive, you can use this step
    # # install TeX live + install required dependencies
    # - name: Setup TeX Live
    #   uses: teatimeguest/setup-texlive-action@v3
    #   with:
    #     version: ${{ inputs.texlive_version }}
    #     packages: ${{ inputs.texlive_packages }}

    #- name: Try calling reusable workflow
    #  uses: SSW-JKU/latex-validation-ci/.github/workflows/test.yml@main

    # ****************************************************************************************
    # *********************************** check_ci_changes ***********************************
    # ****************************************************************************************

    - uses: dorny/paths-filter@v3
      id: filter
      with:
        list-files: 'json'
        filters: |
          changed:
            - added|modified: '*SS/**/*.tex'
            - added|modified: '*WS/**/*.tex'

    - name: Print changed files
      shell: bash
      run: |
        echo "Changed Files:"
        echo ${{ steps.filter.outputs.changed_files }}

    # ****************************************************************************************
    # ********************************* lint_changed_texs ************************************
    # ****************************************************************************************

    - name: Create symbolic link for lint_texs.py
      run: ln -s ${{ github.action_path }}/scripts/lint_texs.py
      shell: bash

    # Install ansi2html for reports, required by "create PR-comment with reports packaged as zip"
    - name: Install ansi2html (included in colorized-logs)
      if: ${{ steps.filter.outputs.changed == 'true' }} && ${{ inputs.lint_pr_comment_with_zipped_report == 'true' }}
      #if: ${{ github.event.inputs.lint_pr_comment_with_zipped_report == 'true' }}
      shell: bash
      run: |
         sudo apt install colorized-logs

    - name: Set lint reports path
      if: ${{ steps.filter.outputs.changed == 'true' }} && ${{ inputs.lint_pr_comment_with_zipped_report == 'true' }}
      shell: bash
      run: |
        echo "LINT_REPORT_FOLDER=${{ inputs.lint_report_folder }}" >> $GITHUB_ENV

    - name: Lint check (chktex)
      if: ${{ steps.filter.outputs.changed == 'true' }}
      shell: bash
      run: |
        chmod +x ${{ github.action_path }}/chktex/chktex
        chmod +x ${{ github.action_path }}/chktexrc.in

        if [[ -n "${{ inputs.lint_pr_comment_with_link_to_GITHUB_SUMMARY }}" || -n "${{ inputs.lint_pr_comment_with_md_report }}" ]]; then
          CREATE_MD_REPORT="true"
        else
          CREATE_MD_REPORT="false"
        fi
        python3 ${{ github.action_path }}/scripts/lint_texs.py --changedfiles '${{ steps.filter.outputs.changed_files }}' --config "${{ github.workspace }}/${{ inputs.build_config }}" --workdir . --lint_pr_comment_with_zipped_report "${{ inputs.lint_pr_comment_with_zipped_report}}" --lint_summary "$CREATE_MD_REPORT"

    # --------------------------------------- Create PR-comment with reports packaged as zip ---------------------------------------
    # Upload the ZIP file as an artifact
    - name: Upload ZIP artifact (captured chktex console-output)
      if: ${{ steps.filter.outputs.changed == 'true' }} && ${{ inputs.lint_pr_comment_with_zipped_report == 'true' }}
      id: artifact-upload-step
      uses: actions/upload-artifact@v4
      with:
        name: chktex_reports
        path: ${{ env.LINT_REPORT_FOLDER }}

    # Create a pull request review comment (with the artifact link)
    - name: Post PR comment (with link to zip artifact)
      if: ${{ steps.filter.outputs.changed == 'true' }} && ${{ inputs.lint_pr_comment_with_zipped_report == 'true' }}
      uses: actions/github-script@v7
      with:
        script: |
          const artifactID = '${{ steps.artifact-upload-step.outputs.artifact-id }}'
          const artifactUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${artifactID}`
          const commentBody = `The linting process found a total of ${process.env.TOTAL_LINT_WARNINGS_ZIP} warnings. The chktex report is available for download: [chktex_report.zip](${artifactUrl})`
          const { data: comment } = await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: commentBody
          });
          console.log(`Comment created: ${artifactUrl}`)

    # Delete all html reports (chktex_reports)
    - name: Delete all files in chktex_reports
      if: ${{ steps.filter.outputs.changed == 'true' }} && ${{ inputs.lint_pr_comment_with_zipped_report == 'true' }}
      shell: bash
      run: |
        rm -rf chktex_reports

    # --------------------------------------- Create PR-comment with chktex-report md ---------------------------------------
    - name: Post Chktex-Lint Report (md file) as PR-comment
      if: ${{ steps.filter.outputs.changed == 'true' }} && ${{ inputs.lint_pr_comment_with_md_report == 'true' }}
      uses: thollander/actions-comment-pull-request@v3
      with:
        file-path: ./lint_summary.md

    # --------------------------------------- Create report as GITHUB_STEP_SUMMARY ---------------------------------------

    - name: Upload GITHUB_STEP_SUMMARY
      if: ${{ steps.filter.outputs.changed == 'true' }} && ${{ env.lint_pr_comment_with_link_to_GITHUB_SUMMARY == 'true' }}
      shell: bash
      run: |
        cat lint_summary.md >> $GITHUB_STEP_SUMMARY

    # Create a pull request review comment (with the step summary link)
    - name: Post PR comment (with GITHUB_STEP_SUMMARY link)
      if: ${{ steps.filter.outputs.changed == 'true' }} && ${{ inputs.lint_pr_comment_with_link_to_GITHUB_SUMMARY == 'true' }}
      uses: actions/github-script@v7
      with:
        script: |
          const runId = process.env.GITHUB_RUN_ID;
          const prNumber = process.env.GITHUB_REF.split('/')[2];
          const summaryUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${runId}`;
          const commentBody = `The linting process found a total of ${process.env.TOTAL_LINT_WARNINGS_REPORT} warnings. The chktex report is available for download: [Summary: Lint check with chktex](${summaryUrl})`;
          const { data: comment } = await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: ${{ github.event.pull_request.number }},
            body: commentBody,
          });
          console.log(`Comment created.`)

    # ****************************************************************************************
    # ********************************** test dummy section **********************************
    # ****************************************************************************************

    # just print the input and set a new output
    - name: Dummy
      id: dummy
      shell: bash
      run: |
        echo "Sample input: ${{ inputs.sample_input }}"
        echo "Python version: ${{ inputs.python_version }}"
        echo "TeX Live version: ${{ inputs.texlive_version }}"
        echo "TeX Live packages: ${{ inputs.texlive_packages }}"
        echo "GITHUB_ACTION_PATH: $GITHUB_ACTION_PATH"
        echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"

        echo "$GITHUB_ACTION_PATH/scripts/lint_texs.py"
        if [ -f "$GITHUB_ACTION_PATH/scripts/lint_texs.py" ]; then
          echo "File exists (using GITHUB_ACTION_PATH)."
        else
          echo "File does not exist (using GITHUB_ACTION_PATH)."
        fi

        echo "sample_output=Sample output" >> $GITHUB_OUTPUT
